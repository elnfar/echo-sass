// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Plan {
  FREE
  PRO
}

enum Role {
  OWNER
  ADMIN
  BILLING

  USER
  TRACKER
  VIEWER
}


model Tenant {
  id String @id @default(uuid())
  name             String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  plan             Plan       @default(FREE)
  expirationDate   DateTime? // NULL -> means no expiration
  inviteKey        String @unique  @default(uuid())
  users            User[]
  stripeCustomerId String?
  activities       Activity[]
  clients          Client[]
  projects         Project[]
}


model User {
id String @id @default(uuid())
  email      String     @unique
  name       String?
  avatar     String?
  role       Role       @default(VIEWER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String   
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  activities Activity[]

  @@index([tenantId])
}

model Activity {
    id String @id @default(uuid())
  name      String?
  startAt   DateTime
  endAt     DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenantId  String
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  clientId  String?   
  client    Client?   @relation(fields: [clientId], references: [id])
  projectId String?  
  project   Project?  @relation(fields: [projectId], references: [id])

  @@index([tenantId])
  @@index([userId])
  @@index([projectId])
  @@index([clientId])
}

model Client {
  id String @id @default(uuid())
  name       String
  color      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  activities Activity[]
  projects   Project[]

  @@index([tenantId])
}

model Project {
  id String @id @default(uuid())
  name       String
  color      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  clientId   String?
  client     Client?    @relation(fields: [clientId], references: [id])
  activities Activity[]

  @@index([tenantId])
  @@index([clientId])
}